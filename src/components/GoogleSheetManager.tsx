import { use, useEffect, useState } from 'react';
import { CourtneyCarousel, CourtneyCarouselProps } from './CourtneyCarousel';
// import { GoogleGenAI } from "@google/genai";
// import { GoogleGenerativeAI } from "@google/generative-ai";
import { GoogleGenerativeAI } from "@google/generative-ai";
import * as fs from "node:fs";

interface SheetData {
    values: string[][];
}

export function GoogleSheetManager() {
    const [sheetData, setSheetData] = useState<SheetData | null>(null);
    const [list, setList] = useState<CourtneyCarouselProps[]>([] as unknown as CourtneyCarouselProps[]);
    const [error, setError] = useState<string | null>(null);
    const [generatedImageUrl, setGeneratedImageUrl] = useState<string | null>(null);

    const API_KEY = import.meta.env.VITE_GOOGLE_API_KEY;
    const SHEET_ID = import.meta.env.VITE_GOOGLE_SHEET_ID;
    const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
    const RANGE = 'Sheet1!A1:B10'; // Adjust range as needed

    // const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
    // const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

    useEffect(() => {
        // generateImage('generate a picture of a girl names courtney who says weird things');
    }, []);

    const fetchSheetData = async () => {
        try {
            const response = await fetch(
                `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${RANGE}?key=${API_KEY}`
            );

            if (!response.ok) {
                throw new Error('Failed to fetch sheet data');
            }

            const data = await response.json();
            setSheetData(data);
            const values = data.values as string[][];
            const formattedList = values.map((row, index) => ({
                id: index,
                text: row[0],
                imagePrompt: row.length > 1 ? row[1] : null,
            }));
            setList(formattedList);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An error occurred');
            console.error('Error fetching sheet data:', err);
        }
    };

    // Function to update sheet data
    const updateSheet = async (values: string[][]) => {
        try {
            const response = await fetch(
                `https://sheets.googleapis.com/v4/spreadsheets/${SHEET_ID}/values/${RANGE}?key=${API_KEY}`,
                {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        values: values,
                        valueInputOption: 'RAW',
                    }),
                }
            );

            if (!response.ok) {
                throw new Error('Failed to update sheet');
            }

            // Refresh data after update
            fetchSheetData();
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An error occurred');
            console.error('Error updating sheet:', err);
        }
    };

    useEffect(() => {
        fetchSheetData();
        return () => {
            if (generatedImageUrl) {
                URL.revokeObjectURL(generatedImageUrl);
            }
        };
    }, [generatedImageUrl]);

    if (error) {
        return <div className="text-red-500">Error: {error}</div>;
    }

    return (
        <div>
            {error && <div className="text-red-500">Error: {error}</div>}
            {generatedImageUrl && (
                <div className="mb-4">
                    <img
                        src={generatedImageUrl}
                        alt="Generated by Gemini"
                        className="max-w-full h-auto rounded-lg shadow-lg"
                    />
                </div>
            )}
            {list.length > 0 ? (
                <CourtneyCarousel list={list} />
            ) : (
                <p>Loading...</p>
            )}
        </div>
    );
}